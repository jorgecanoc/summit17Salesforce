/*
 * Salesforce DTO generated by camel-salesforce-maven-plugin
 * Generated on: Fri Apr 14 20:48:00 EDT 2017
 */
package org.apache.camel.salesforce.dto;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * Salesforce Enumeration DTO for picklist Field
 */
public enum ContentDocumentHistory_FieldEnum {

    // ArchivedBy
    ARCHIVEDBY("ArchivedBy"),
    // ArchivedDate
    ARCHIVEDDATE("ArchivedDate"),
    // ContentAsset
    CONTENTASSET("ContentAsset"),
    // DeletedBy
    DELETEDBY("DeletedBy"),
    // DeletedDate
    DELETEDDATE("DeletedDate"),
    // IsArchived
    ISARCHIVED("IsArchived"),
    // Owner
    OWNER("Owner"),
    // Parent
    PARENT("Parent"),
    // PublishStatus
    PUBLISHSTATUS("PublishStatus"),
    // Title
    TITLE("Title"),
    // contentDocFeatured
    CONTENTDOCFEATURED("contentDocFeatured"),
    // contentDocPublished
    CONTENTDOCPUBLISHED("contentDocPublished"),
    // contentDocRepublished
    CONTENTDOCREPUBLISHED("contentDocRepublished"),
    // contentDocSubscribed
    CONTENTDOCSUBSCRIBED("contentDocSubscribed"),
    // contentDocUnpublished
    CONTENTDOCUNPUBLISHED("contentDocUnpublished"),
    // contentDocUnsubscribed
    CONTENTDOCUNSUBSCRIBED("contentDocUnsubscribed"),
    // created
    CREATED("created"),
    // feedEvent
    FEEDEVENT("feedEvent"),
    // locked
    LOCKED("locked"),
    // ownerAccepted
    OWNERACCEPTED("ownerAccepted"),
    // ownerAssignment
    OWNERASSIGNMENT("ownerAssignment"),
    // unlocked
    UNLOCKED("unlocked");

    final String value;

    private ContentDocumentHistory_FieldEnum(String value) {
        this.value = value;
    }

    @JsonValue
    public String value() {
        return this.value;
    }

    @JsonCreator
    public static ContentDocumentHistory_FieldEnum fromValue(String value) {
        for (ContentDocumentHistory_FieldEnum e : ContentDocumentHistory_FieldEnum.values()) {
            if (e.value.equals(value)) {
                return e;
            }
        }
        throw new IllegalArgumentException(value);
    }

}
